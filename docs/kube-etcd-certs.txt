# Use this make-ca-cert to generate a new set of certs that includes ones
# for etcd.  Ignore the kube ones
https://github.com/detiber/contrib/blob/etcdCerts/ansible/roles/kubernetes/files/make-ca-cert.sh

# Run that script like this.  The certs will be created in /tmp
MASTER_IP=<kube_ip> master_name=<kube_ip> SERVICE_CLUSTER_IP_RANGE="<kube_service_ip_range>/16" DNS_DOMAIN="cluster.local" CERT_DIR=/tmp CERT_GROUP=kube-cert HTTP_PROXY="" HTTPS_PROXY="" ./make-ca-cert.sh

# Copy the certs for etcd
mkdir /etc/etcd/certs
pushd /tmp
cp ca.crt etcd_peer.crt etcd_peer.key etcd_server.crt etcd_server.key /etc/etcd/certs
popd

# Copy the client certs to kube
cp /tmp/etc_client.* /etc/kubernetes/certs
chown kube.kube-cert /etc/kubernetes/certs/etc_client.key /etc/kubernetes/certs/etc_client.crt

# Configure etcd, setting these values
ETCD_LISTEN_CLIENT_URLS="https://0.0.0.0:2379"
ETCD_ADVERTISE_CLIENT_URLS=https://<etcd ip>:2379
ETCD_CA_FILE=/etc/etcd/certs/ca.crt
ETCD_CERT_FILE=/etc/etcd/certs/etcd_server.crt
ETCD_KEY_FILE=/etc/etcd/certs/etcd_server.key
ETCD_PEER_CA_FILE=/etc/etcd/certs/ca.crt
ETCD_PEER_CERT_FILE=/etc/etcd/certs/etcd_peer.crt
ETCD_PEER_KEY_FILE=/etc/etcd/certs/etcd_peer.key

# Create an etcd config file
vi /etc/kubernetes/etcd_config.json
{
  "cluster": {
    "leader": "",
    "machines": ["https://<etcd ip>:2379"]
  },
  "config": {
    "caCertFiles": ["/etc/etcd/certs/ca.crt"],
    "certFile": "/etc/kubernetes/certs/etcd_client.crt",
    "keyFile": "/etc/kubernetes/certs/etcd_client.key"
  }
}

# Modify the apiserve to use the etcd config instead of etcd servers
#KUBE_ETCD_SERVERS="--etcd-servers=http://<etcd ip>:2379"
KUBE_ETCD_SERVERS="--etcd-config=/etc/kubernetes/etcd_config.json"

# Restart etcd and kube-apiserver
systemctl restart etcd kube-apiserver
